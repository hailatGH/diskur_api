"""
Django settings for moogtmeda project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import datetime
import os
from firebase_admin import initialize_app

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(
    os.path.dirname(os.path.abspath(__file__))))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'jt9cl$&%eh(xmji^tuy-xk-%yf@k0y&6yi%(g8j&_8&qqc3xah'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    'moogtmeda.appspot.com',
    'moogtmeda-genioshelo306739.codeanyapp.com',
    '.moogter.com',
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.humanize',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',

    # adding postgres to give more advanced searching features
    'django.contrib.postgres',
    #'django_dbconn_retry',

    # Our apps.
    'api',
    'arguments',
    'chat',
    'invitations',
    'meda',
    'moogts',
    # Adds notification support.
    'notifications',
    'polls',
    # Defines a custom user model for the project.
    'users',
    'views',

    # Third party apps
    'channels',

    # The DRF app
    'rest_framework',

    # This is required to get authentication token by DRF
    'rest_framework.authtoken',

    # Django rest-auth app
    'dj_rest_auth',

    # Used for handling user registration and authentication.
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # In the future, allow users to sign up with Facebook and Google.
    # 'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.google',

    # djang-avatar provides functionality for user avatars.
    'avatar',

    # Used  Sass into CSS.
    'static_precompiler',

    # Additional useful utility commands.
    'django_extensions',

    # Comments
    'django_comments_xtd',
    'django_comments',

    # This is for user preferences.
    'dynamic_preferences',
    'dynamic_preferences.users.apps.UserPreferencesConfig',

    'fcm_django',

    # project-wide utility commands.
    'moogtmeda.util',

    # django debug toolbar for profiling.
    'debug_toolbar',

    # This is for setting CORS headers.
    'corsheaders',

    # For serilaizer optimization
    'rest_framework_serializer_extensions',

    # For telegram notification
    'django_tgbot',

    # The telegram bot application
    'moogter_bot',
    
    'django_filters'
]

AUTH_USER_MODEL = 'users.MoogtMedaUser'

# Special setting, non-django.
# Note that this means dev server has be run on port 8000.
SITE_DOMAIN_NAME = 'localhost:8000'

SITE_ID = 2

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'moogtmeda.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['template_overrides'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'dynamic_preferences.processors.global_preferences',
            ],

            'libraries': {
                'meda_templates': 'meda.templatetags.meda_tags',
            },
        },
    },
]

WSGI_APPLICATION = 'moogtmeda.wsgi.application'
ASGI_APPLICATION = 'moogtmeda.routing.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# Install PyMySQL as mysqlclient/MySQLdb to use Django's mysqlclient adapter
# See https://docs.djangoproject.com/en/2.1/ref/databases/#mysql-db-api-drivers
# for more information
# import pymysql  # noqa: 402
#
# pymysql.install_as_MySQLdb()

# [START db_setup]
if 'test' in os.sys.argv:
    DATABASES = {
        # When running locally, use a local sqlite3 database for testing.
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'moogtmeda.db'),
        },
    }
elif not os.getenv('MOOGTMEDA_USE_PROD_DB', None):
    DATABASES = {
        # When running locally, use a local MySql database.
        # If access to production (cloud) database is needed, use --database='prod'.
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            # If you're using docker change the host from localhost to db or the name of your database container name

            'HOST': 'localhost',
            'NAME': 'moogter',
            'USER': 'moogter_dev_user',
            'PASSWORD': 'dev_password',
        },
    }
else:
    DATABASES = {
        # This overrides the database configuration to use the production database
        # on the Google Cloud SQL service via the local proxy.
        # To start the proxy via command line:
        #
        #     $ cloud_sql_proxy -instances=[INSTANCE_CONNECTION_NAME]=tcp:3306
        #
        # See https://cloud.google.com/sql/docs/mysql-connect-proxy
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'HOST': '127.0.0.1',
            'PORT': '3306',
            'NAME': 'moogter_dev',
            'USER': 'moogter-dev-user',
            'PASSWORD': 'A4jlMizz2bi1LGl7',
            'OPTIONS': {'charset': 'utf8mb4'}
        }
    }
# [END db_setup]


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = (
    # Included by default. Needed to login by username in Django admin.
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'users.auth_backends.CustomAuthenticationBackend',
)

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATIC_URL = '/static/'

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Use `python manage.py compilestatic` to pre-compile. Runtime compilation
# is disabled to avoid attempting to write to a read-only filesystem on
# gCloud.
STATIC_PRECOMPILER_DISABLE_AUTO_COMPILE = True

STATIC_PRECOMPILER_COMPILERS = [
    (
        'static_precompiler.compilers.libsass.SCSS', {
            "sourcemap_enabled": True,
            "load_paths": [],
            "precision": 8,
        }),
]

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'static_precompiler.finders.StaticPrecompilerFinder',
]

# django-avatar settings.
AVATAR_GRAVATAR_DEFAULT = 'mp'
AVATAR_DEFAULT_URL = 'https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp'

# django-allauth settings.

# Disable email verification for the time being.
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

# Allows loging with email or username.
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'

# Makes all usernames lowercase.
ACCOUNT_PRESERVE_USERNAME_CASING = False

ACCOUNT_USER_DISPLAY = 'users.models.moogtmeda_user_display'

ACCOUNT_FORMS = {'signup': 'users.forms.MoogtMedaSignupForm'}

ACCOUNT_EMAIL_SUBJECT_PREFIX = '[Moogter] '

ACCOUNT_PRESERVE_USERNAME_CASING = False

ACCOUNT_EMAIL_REQUIRED = True

ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http' if DEBUG else 'https'

# Django email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@moogter.com'

EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_HOST_USER = 'apikey'
EMAIL_HOST_PASSWORD = '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'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

COMMENTS_APP = 'django_comments_xtd'
COMMENTS_XTD_MAX_THREAD_LEVEL = 1
COMMENTS_XTD_CONFIRM_EMAIL = True
COMMENTS_XTD_APP_MODEL_OPTIONS = {
    'default': {
        'allow_flagging': True,
        'allow_feedback': True,
        'show_feedback': True
    },
    'views.view': {
        'allow_flagging': True,
        'allow_feedback': True,
        'show_feedback': True
    },
    'django_comments_xtd.xtdcomment': {
        'allow_flagging': True,
        'allow_feedback': True,
        'show_feedback': True
    }
}

# General DRF Configuration goes here
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,

    # This is for versioning our API. There are a couple of options, look at:
    # https://www.django-rest-framework.org/api-guide/versioning/#urlpathversioning
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',

    # Auto Optimization
    'SERIALIZER_EXTENSIONS': {'AUTO_OPTIMIZE': True},
    
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

REST_USE_JWT = True

# This is for adding our own logic to the registration process, i.e., create a profile for a newly registered user
REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "users.serializers.MoogtMedaSignupSerializer"
}

# JWT settings
JWT_AUTH = {
    # Allow refresh tokens to be used
    'JWT_ALLOW_REFRESH': True,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_PAYLOAD_HANDLER': 'users.utils.custom_jwt_payload_handler',
}

# IPs to allow django debug toolbar
INTERNAL_IPS = [
    '127.0.0.1',
]

FACEBOOK_APP_ID = '2579327912280643'
FACEBOOK_APP_SECRET = 'ed012b09254f67bff5939012ebbd38ef'
FACEBOOK_AUTH_TOKEN = '2579327912280643|yiukhF7lH6LfIHQFZM4NCQjsT2Y'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

FIREBASE_APP = initialize_app()

FCM_DJANGO_SETTINGS = {
    # true if you want to have only one active device per registered user at a time
    # default: False
    "ONE_DEVICE_PER_USER": False,
}

EMAIL_SUBJECT_PREFIX = '[Moogter] '
SERVER_EMAIL = 'noreply@moogter.com'